{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["Movie","id","title","year","summary","poster","genres","className","to","pathname","state","src","alt","style","backgroundColor","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3339e6ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n//모듈을 사용할때는 이렇게.\r\nimport './Movie.css';\r\nimport { Link } from 'react-router-dom';\r\n//그냥 파일만 불러올땐 이렇게.\r\n\r\nfunction Movie({ id, title, year, summary, poster, genres }) { \r\n    return (\r\n        <div className=\"movie\">\r\n            <Link to={{\r\n                pathname: '/movie_detail',\r\n                state: { year, summary, poster, genres}\r\n            }}>\r\n            {/* movie 클릭하면, movie_detail로 이동하고, 전달해줘 > year, summary, poster, genres */}\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\" style={{ backgroundColor: '#eee' }}>{title}</h3>\r\n                <h4 className=\"movie_year\">{year}</h4>\r\n                <ul className=\"movie_genres\">\r\n                    {genres.map((genre, index) => {\r\n                        return (\r\n                            <li key={index} className=\"movie_genre\">{genre}</li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            <p className=\"movie_summary\">{summary.slice(0, 180)} ...</p>\r\n            </div>\r\n            </Link>\r\n    </div>\r\n    );\r\n    //slice(0,180) 글자를 0부터 180 직전까지 summary에서 추출하겠다\r\n    //jsx문법 backgroundColor > 파이프 없이.\r\n    //style={{ backgroundColor: '#eee' }} 객체이기때문에 이렇게 더블블록으로 넣어줘야함.\r\n    //{genres.map(genre,index)} 배열 genres S붙여주고, 하나하는 genre / 인덱스번호도 받아줘야함\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired, //꼭 들어가야할것 지정, 필수항목 - 잘못들어가있으면 에러남.\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n}; \r\n\r\nexport default Movie;\r\n \r\n","import React from 'react'; //react 파일 불러옴\r\nimport axios from 'axios'\r\nimport Movie from '../components/Movie' //바깥으로 나간다음에 가져올때 ../\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component { \r\n\r\n\r\n  // 1\r\n  state = { //동적데이터\r\n    isLoading: true, //key: key value\r\n    movies: [],\r\n  }//state 선언\r\n  //여기에 영화 20개 들어가 있어욤\r\n\r\n\r\n\r\n  //async이 함수는 비동기 함수야. await 그래서 좀 기다려줘야해 > 항상 세트로 사용해야함.\r\n  getMovies = async () => { \r\n    const {\r\n      data: { \r\n        data: {movies},\r\n      },\r\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?genre=animation&sort_by=like_count');\r\n    //장르 애니메이션인데, 좋아요순으로 불러오겠다. \r\n    //console.log(movies, data, data.movies);\r\n    //사용하고자 하는 실질적인 정보는 data, data.movies 안에 들어가 있기때문에 구조분해할당으로 바꿔줌\r\n    this.setState({ movies: movies, isLoading: false }); //키랑 키값 이름이 동일하면 하나만 씀...movies: movies\r\n  }\r\n  //변수에 넣어주고 componentDidMount에서 호출해줌\r\n\r\n\r\n\r\n  // 3\r\n  componentDidMount() { //생명주기함수\r\n    // setTimeout(() => { \r\n    //   this.setState({ isLoading : false });\r\n    // }, 6000)\r\n    //setState 값 바꿔줘 > render를 또다시 호출\r\n\r\n    // axios.get('https://yts-proxy.now.sh/list_movies.json')\r\n    //axios로 json파일 가져오겠다 : 데이터 가져올때 이렇게 쓰면 됩니다.\r\n\r\n    this.getMovies();\r\n    //this는 현재 클래스를 나타냄\r\n  }\r\n  \r\n\r\n\r\n  // 2 , 4\r\n  render() {\r\n    const { isLoading, movies } = this.state //구조분해할당\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ?\r\n        (<div className=\"loader\">\r\n            <span className=\"loader+text\">'Loding...'</span>\r\n        </div>) :\r\n        //true 일때 Loding 실행\r\n          \r\n        //setState 값이 바뀌면서 render 다시 실행 > divr가 실행됨\r\n        (<div className=\"movies\">\r\n          {movies.map(movie => (<Movie\r\n            id={movie.id}\r\n            title={movie.title}\r\n            year={movie.year}\r\n            summary={movie.summary}\r\n            poster={movie.medium_cover_image}\r\n            genres={movie.genres}\r\n            \r\n          />))}\r\n        </div>)\r\n       }\r\n      </section>\r\n    );\r\n    //movies = state (위에서 넣어줌)\r\n    //isLoading가 true이기때문에 Loding..실행 / false이면 We ard Ready!\r\n    //render가 실행되고 나서 componentDidMount 실행 > 그래서 We ard Ready!\r\n    //setState가 바뀌면 render 다시 실행됨.\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport './About.css';\r\n\r\nfunction About(props) {\r\n    console.log(props)\r\n    return (\r\n        <div className=\"about_container\">\r\n            <span>\"A JavaScript library for building user interface\"</span>\r\n            <span>- React -</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n//링크를 통해서 이동함....\r\nimport './Navigation.css';\r\n//같은 폴더안에 있으니께..\r\n\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n            {/* <Link to={{ pathname: '/about', state: {fromNavigation: true}}}>About</Link> \r\n            > 이런식으로 정보전달 해줄 수 있다고 하는데 뭔말이징...ㅜ ㅜ */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react'\r\nimport './Detail.css';\r\n\r\n\r\nexport default class Detail extends Component { \r\n    componentDidMount() { \r\n        const { location, history } = this.props;\r\n        if (location.state === undefined) {\r\n            history.push('/');\r\n        }\r\n    }\r\n    render() {\r\n        const { location } = this.props;\r\n        console.log(location.state);\r\n        if (location.state) {\r\n            return (\r\n                <div className=\"detail\">\r\n                <img src={location.state.poster} alt={location.state.title} title={location.state.title} />\r\n                <div className=\"detail_data\">\r\n                    <h3 className=\"detail_title\" style={{ backgroundColor: '#eee' }}>{location.state.title}</h3>\r\n                    <h4 className=\"detail_year\">{location.state.year}</h4>\r\n                    <ul className=\"detail_genres\">\r\n                        {location.state.genres.map((genre, index) => {\r\n                            return (\r\n                                <li key={index} className=\"detail_genre\">{genre}</li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                <p className=\"detail_summary\">{location.state.summary.slice(0, 180)} ...</p>\r\n                </div>\r\n                </div>\r\n            )\r\n        } else { \r\n            return null\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\nimport './App.css';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Navigation from './components/Navigation';\nimport Detail from './routes/Detail';\n\n\nfunction App() { \n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie_detail\" component={Detail} />\n    </HashRouter>\n  );\n}\nexport default App;\n\n//홈이랑 어바웃 같이 나오는데(/about) 홈이 나오지 않게 하기 위해 exact={true} 값을 넣어줌\n","import React from 'react';\n// 자바스크립트처럼 이렇게 꽂아서 사용할 수 있음 import 사용 : 불러와야함\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// 같은 폴더 안에 있을때 ./ 사용 (길게 표시하기 힘드니까 짧게 표시하겠다)\n\n\nReactDOM.render( //render 그리는 함수\n  // 이런 구조를 화면에 그려라 누구를? <App /> 어디다? document.getElementById('root') 아이디가 root인 컴포넌트를 그려라\n    <App />,\n  document.getElementById('root') //index.html > <div id=\"root\"></div> 여기에 그려넣어라.\n); //요게 가장 중요해요 : index.js가 중간역할을 해요. \n\n"],"sourceRoot":""}